#!/usr/bin/env python2
from __future__ import print_function

import argparse
import math
import os
import sys

import gcoder

sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'svgpathtools'))
import svgpathtools


parser = argparse.ArgumentParser(description="Compute an offset path from the path in an SVG file.")
parser.add_argument("SVG", help="The name of the SVG file to read.")
parser.add_argument("-o", "--offset", type=float, help="The offset to use.")
parser.add_argument("-s", "--speed", type=int, help="The spindle speed to use, in RPM.  (Default: 1000.)", default=1000)
parser.add_argument("-f", "--feed", type=float, help="The tool feed rate to use, in mm/minute.  (Default: 1000)", default=1000)
parser.add_argument("--include-input", action="store_true", help="Emit g-code for input path too (in addition to emitting g-code for the offset path).")
args = parser.parse_args()

svg = gcoder.svg(args.SVG)

input_path = svg.paths[0]
if not input_path.isclosed():
    raise ValueError, "path is not closed"

offset_paths = gcoder.offset_path(input_path, args.offset)

svgpathtools.paths2svg.wsvg(paths=[input_path] + offset_paths)

gcoder.metric()
gcoder.speed(args.speed)
gcoder.feed(args.feed)

if args.include_input:
    gcoder.comment("input path")
    gcoder.path_to_gcode(svg, input_path)

for offset_path in offset_paths:
    gcoder.comment("offset path (%.4f offset)" % args.offset)
    gcoder.path_to_gcode(svg, offset_path)

gcoder.m2()

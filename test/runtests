#!/bin/bash

#
# Copyright (C) 2018 Sebastian Kuzminsky
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
# 


export PYTHONPATH=$(dirname $(realpath $0))/..:${PYTHONPATH}
export PATH=$(dirname $(realpath $0))/..:${PATH}

do_test() {
    TEST_FILE=$(basename "$1")

    if [ -f skip ]; then
        echo SKIPPED
        return 2
    fi

    rm -f stderr
    if [ -f expected.ngc ]; then
        if [[ "${TEST_FILE}" =~ .s2g$ ]]; then
            svg2gcode --debug --job ${TEST_FILE} $(cat test.args 2> /dev/null) test.svg >| result.ngc 2>> stderr
        else
            ./${TEST_FILE} > result.ngc 2>> stderr
        fi
    else
        ./${TEST_FILE} 2>> stderr
    fi
    if [ $? -ne 0 ]; then
        echo "FAILED: non-zero exit code"
        cat stderr
        return 1
    fi

    if [ -f expected.ngc -a -f result.ngc ]; then
        diff -u expected.ngc result.ngc
        if [ $? -ne 0 ]; then
            echo "FAILED: unexpected G-code result"
            return 1
        fi
    fi

    if [ -f result.ngc -a -x rs274 ]; then
        rs274 -t /dev/null -v /dev/null -g result.ngc >| result.canon 2>> stderr
        if [ $? -ne 0 ]; then
            echo "FAILED: resulting g-code rejected by SAI"
            return 1
        fi
    fi

    return 0
}


if [[ $# -gt 0 ]]; then
    TEST_DIRS="$@"
else
    TEST_DIRS=$PWD
fi

FAILED=""
SKIPPED=""
for TEST in $(find ${TEST_DIRS} -name 'test*.py' -o -name 'test.sh' -o -name 'test.s2g' | sort); do
    TEST_DIR=$(dirname ${TEST})
    TEST_NAME=$(realpath ${TEST_DIR})
    HERE=$(realpath ${PWD})
    TEST_NAME=${TEST_DIR#${HERE}/}
    ORIG_DIR=${PWD}

    echo "running ${TEST_NAME}"
    cd ${TEST_DIR}
    do_test ${TEST}
    R=$?
    if [ $R -eq 0 ]; then
        rm -f result.ngc
        rm -f result.canon
        rm -f stderr
    elif [ $R -eq 1 ]; then
        FAILED="${FAILED} ${TEST_NAME}"
    elif [ $R -eq 2 ]; then
        SKIPPED="${SKIPPED} ${TEST_NAME}"
    else
        echo "unknown return code $? from do_test, aborting"
        exit 99
    fi
    cd ${ORIG_DIR}
done


RETVAL=0

if [ -n "${FAILED}" ]; then
    echo "failed tests:"
    for TEST in ${FAILED}; do
        echo "    ${TEST}"
    done
    RETVAL=1
fi

if [ -n "${SKIPPED}" ]; then
    echo "skipped tests:"
    for TEST in ${SKIPPED}; do
        echo "    ${TEST}"
    done
fi

exit ${RETVAL}

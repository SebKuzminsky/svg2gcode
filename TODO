What I want for the first step is a simple CAM program that reads an
SVG and makes a pocketing toolpath from the interior of the path.

It must be scriptable.

A future version might have an optional GUI.  This GUI should display
the input SVG and the computed tool path, and let you export the toolpath
as g-code.

I'm planning to use svgpathtools to compute the offset paths needed,
so it would be most convenient if i could render its Path objects.


# Future embellishments

* replace svgpathtools with something else?

** svg.path + shapely?  Shapely doesn't do arcs or bezier curves, only
    linear splines.  Which is maybe fine.  Shapely has parallel_offset(),
    left and right...  FlatCAM uses Shapely.

** pythonocc/liboce?  (pythonocc isn't packaged, liboce doesn't have
    python bindings in stretch)

** occmodel?  Jeff used it for CAD in python.

* pocket: Leave behind some finishing allowance, slot the perimeter
    (or the center?), clear the bulk.

* Specify cut parameters (max doc, max woc, speed, feed) for plunging,
    slotting and side-milling, for roughing and finishing.

* Override pocket cut params from command line.  Width of cut is a
    function of depth of cut.

* Specify preamble (set G64P, G40, etc, like gcoder.init()).

* Join adjacent offset curves smarter.  First cut a slot offset by
    finishing allowance + tool radius, then side-mill to the inside
    by the side-milling doc.  Or first slot the innermost path, then
    side-mill out?  Watch how the depth of cut compares between slotting
    and side milling.

* Cut along the path (outside, inside, or right on top, optionally with
  work-holding tabs.

* Pockets with islands.
